[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "How to setup Pytorch and Tensorflow with GPU support (CUDA) on WSL2?\n\n\n\n\n\n\n\npytorch\n\n\ntensorflow\n\n\nwsl\n\n\ncuda\n\n\n\n\n\n\n\n\n\n\n\nNov 18, 2022\n\n\nShashwath Krishna\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About myself",
    "section": "",
    "text": "Hey everyone, welcome to my blog :) I’m Shashwath and I’m a Machine Learning Engineer. I love all things ML/Deep Learning/Natural language processing/Computer Vision. This will be a space where I explore different concepts/ random musings and learn new stuff along the way (together) hopefully!"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/2022-11-13/index.html",
    "href": "posts/2022-11-13/index.html",
    "title": "How to setup Pytorch and Tensorflow with GPU support (CUDA) on WSL2?",
    "section": "",
    "text": "Alright, you have your Windows machine and you want to run Linux on it? Better yet, you want to run some Machine Learning/Deep Learning experiments whilst not having to do a dual boot or on a VirtualBox? This post will help you setup your linux environment for ML/DL wit h GPU support using the awesome Windows Subsystem for Linux (WSL).\n\nQuick WSL overview\nThe Windows Subsystem for Linux (WSL) is layer build on top of the Windows operating system where you can run linux programs/executables. Think of it as a virtualization technology that provides you with an isolated environment that runs linux within your windows ecosystem.\n\n\nSteps\n\nInstall WSL\nInstall NVIDIA driver\nInstall Miniconda\nInstall Tensorflow\n\nCreate a virtual environment\nInstall CUDA and CUDNN\nExport environment variables\nInstall Tensorflow\n\nInstall PyTorch\n\nCreate a virtual environment\nInstall PyTorch using conda\n\n\n\n\nInstall WSL\nIf you have a machine with Windows 10, you can install WSL using the Windows insider program. Modern machines running Windoews 11 can install using the following command\nwsl --install\nThis command will install Ubuntu as the default Linux distro, if you want to check all the other available distros, you can run\nwsl --list --online\nFor example, if you wanted to install kali-linux, then you simply run\nwsl --install -d kali-linux\nIf you want to check the version of the Linux kernel and other info, simply run\nwsl --version\nIf you want to update the version of WSL to the latest available one, simply run\nwsl --update\n\n\nInstall the Nvidia driver\nThe next step is to install the NVIDIA driver. Now it is very important to note that you should NOT install the NVIDIA driver within your linux environment. The NVIDIA driver should only be installed on the Windows machine. You can find the driver that is compatible with your machine right here.\nDownload the exe file and click on it and follow the instructions to complete the installation.\n\n\nInstall Miniconda\nNow switch to your linux shell and install miniconda with the following commands. Miniconda is a lightweight Anaconda installer which is in turn a tool to build isolated python environments without messing with external installations of other software packages. It makes it very convenient to build virtual environments for your python projects without worrying about all the dependency issues.\ncurl https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o Miniconda3-latest-Linux-x86_64.sh\n\nbash Miniconda3-latest-Linux-x86_64.sh\n\n\nInstall Tensorflow\n\nCreate a virtual environment\n\nconda create --name tf python=3.8\nYou can activate and deactivate the virtual environment using the following commands\nconda deactivate\nconda activate tf\nwhere tf is the name of the virtual environment you just created. The rest of the commands should be run after you activate the virtual environment.\n\nInstall CUDA and CUDNN\n\nconda install -c conda-forge cudatoolkit=11.2 cudnn=8.1.0\n\nExport environment variables\n\nmkdir -p $CONDA_PREFIX/etc/conda/activate.d\n\necho 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CONDA_PREFIX/lib/' > $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh\n\nInstall Tensorflow Once you exported the environment variables, you need to restart your terminal. Re activate the environment and install the tensorflow using pip below\n\npip install tensorflow\n\nTest the installation You can test if the installation ran successfully by running the following snippet of code in a python shell within your environment\n\nimport tensorflow as tf\n\nif tf.test.is_gpu_available() == True:\n    print(\"Tensorflow succesfully detected the GPU\")\nelse:\n    print(\"Tensoflow did not detect the GPU\")\n\n\nInstall PyTorch\n\nCreate a virtual environment\n\nconda create --name pytorch python=3.8\n\nInstall Pytorch\n\nconda activate pytorch\nconda install pytorch torchvision torchaudio pytorch-cuda=11.7 -c pytorch -c nvidia\n\nTest the installation\n\nimport torch\n\nif torch.cuda.is_available() == True:\n    print(\"PyTorch successfully detected the GPU\")\nelse:\n    print(\"PyTorch did not detect the GPU\")\nThat concludes this walkthrough, now you hopefully have Tensorflow/PyTorch successfully installed with GPU support. Happy Deep Learning :)"
  },
  {
    "objectID": "posts/2022-11-18/index.html",
    "href": "posts/2022-11-18/index.html",
    "title": "How to setup Pytorch and Tensorflow with GPU support (CUDA) on WSL2?",
    "section": "",
    "text": "Alright, you have your Windows machine and you want to run Linux on it? Better yet, you want to run some Machine Learning/Deep Learning experiments whilst not having to do a dual boot or on a VirtualBox? This post will help you setup your linux environment for ML/DL wit h GPU support using the awesome Windows Subsystem for Linux (WSL).\n\nQuick WSL overview\nThe Windows Subsystem for Linux (WSL) is layer build on top of the Windows operating system where you can run linux programs/executables. Think of it as a virtualization technology that provides you with an isolated environment that runs linux within your windows ecosystem.\n\n\nSteps\n\nInstall WSL\nInstall NVIDIA driver\nInstall Miniconda\nInstall Tensorflow\n\nCreate a virtual environment\nInstall CUDA and CUDNN\nExport environment variables\nInstall Tensorflow\n\nInstall PyTorch\n\nCreate a virtual environment\nInstall PyTorch using conda\n\n\n\n\nInstall WSL\nIf you have a machine with Windows 10, you can install WSL using the Windows insider program. Modern machines running Windows 11 can install using the following command\nwsl --install\nThis command will install Ubuntu as the default Linux distro, if you want to check all the other available distros, you can run\nwsl --list --online\nFor example, if you wanted to install kali-linux, then you simply run\nwsl --install -d kali-linux\nIf you want to check the version of the Linux kernel and other info, simply run\nwsl --version\nIf you want to update the version of WSL to the latest available one, simply run\nwsl --update\n\n\nInstall the Nvidia driver\nThe next step is to install the NVIDIA driver. Now it is very important to note that you should NOT install the NVIDIA driver within your linux environment. The NVIDIA driver should only be installed on the Windows machine. You can find the driver that is compatible with your machine right here.\nDownload the exe file and click on it and follow the instructions to complete the installation.\n\n\nInstall Miniconda\nNow switch to your linux shell and install miniconda with the following commands. Miniconda is a lightweight Anaconda installer which is in turn a tool to build isolated python environments without messing with external installations of other software packages. It makes it very convenient to build virtual environments for your python projects without worrying about all the dependency issues.\ncurl https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o Miniconda3-latest-Linux-x86_64.sh\n\nbash Miniconda3-latest-Linux-x86_64.sh\n\n\nInstall Tensorflow\n\nCreate a virtual environment\n\nconda create --name tf python=3.8\nYou can activate and deactivate the virtual environment using the following commands\nconda deactivate\nconda activate tf\nwhere tf is the name of the virtual environment you just created. The rest of the commands should be run after you activate the virtual environment.\n\nInstall CUDA and CUDNN\n\nconda install -c conda-forge cudatoolkit=11.2 cudnn=8.1.0\n\nExport environment variables\n\nmkdir -p $CONDA_PREFIX/etc/conda/activate.d\n\necho 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CONDA_PREFIX/lib/' > $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh\n\nInstall Tensorflow Once you exported the environment variables, you need to restart your terminal. Re activate the environment and install the tensorflow using pip below\n\npip install tensorflow\n\nTest the installation You can test if the installation ran successfully by running the following snippet of code in a python shell within your environment\n\nimport tensorflow as tf\n\nif tf.test.is_gpu_available() == True:\n    print(\"Tensorflow succesfully detected the GPU\")\nelse:\n    print(\"Tensoflow did not detect the GPU\")\n\n\nInstall PyTorch\n\nCreate a virtual environment\n\nconda create --name pytorch python=3.8\n\nInstall Pytorch\n\nconda activate pytorch\nconda install pytorch torchvision torchaudio pytorch-cuda=11.7 -c pytorch -c nvidia\n\nTest the installation\n\nimport torch\n\nif torch.cuda.is_available() == True:\n    print(\"PyTorch successfully detected the GPU\")\nelse:\n    print(\"PyTorch did not detect the GPU\")\nThat concludes this walkthrough, now you hopefully have Tensorflow/PyTorch successfully installed with GPU support. Happy Deep Learning :)"
  }
]